grep -rnw '/path/to/somewhere/'-e 'pattern'
-r or -R is recursive,
-n is line number, and
-w stands for match the whole word.
-l (lower-case L) can be added to just give the file name of matching files.
Along with these, 
--exclude, --include, --exclude-dir 
or ????? --include-dir flags:

This will only search through those files which have .c or .h extensions:

grep --include=\*.{c,h} -rnw '/path/to/somewhere/' -e "pattern"

This will exclude searching all the files ending with .o extension:

grep --exclude=*.o -rnw '/path/to/somewhere/'-e "pattern"

Just like exclude files, it's possible to exclude/include directories through 
--exclude-dir

 parameter. this will exclude the dirs dir1/, dir2/ and all of them matching *.dst/:
grep --exclude-dir={dir1,dir2,*.dst}-rnw '/path/to/somewhere/'-e "pattern"

grep --exclude-dir={build,target,.scannerwork,lib,yaml} -ril ClientInformationSearchRequest C:/git/partnerRest-dev-20231004/implementation




grep -Ril "text-to-find-here" /
i stands for ignore case (optional in your case).
R stands for recursive.
l stands for "show the file name, not the result itself".
/ stands for starting at the root of your machine.



cp -f C:/bash3/data/Restricted.txt C:/bash3/out/.

cat Restricted.txt



grep -rl 7001 . --exclude-dir=.git | xargs sed -i -e 's/7001/1221/g'

grep --exclude-dir=target -r "Choose Environment" *


grep pattern -r --include=\*.cpp --include=\*.h rootdir

grep pattern -r --include=\*.cpp rootdir

grep pattern -r --include=\*.{cpp,h} rootdir



grep mockito -r --exclude-dir=target --include=pom.xml .





grep RestrictedServices -rli C:/bash3/out | xargs awk -f C:/bash3/CaseTUSUM.awk 

grep RestrictedServices -rli C:/bash3/out | xargs awk -f C:/bash3/CaseTUSUM.awk {} > tmp_file && mv tmp_file {}

grep RestrictedServices -rli C:/bash3/out | xargs awk -f C:/bash3/CaseTUSUM.awk {} > tmp_file && mv tmp_file {} +

grep RestrictedServices -rli C:/bash3/out | xargs awk -f C:/bash3/CaseTUSUM.awk "{}" > tmp_file && mv tmp_file "{}"

grep RestrictedServices -rli C:/bash3/out | xargs awk -f C:/bash3/CaseTUSUM.awk '{}' > tmp_file && mv tmp_file '{}'




 
grep -rli businessServices C:/bash3/out/* | xargs gawk -i inplace -f CaseTUSUM.awk
 
grep -rli businessServices "C:/bash3/out/.*"

cd C:/bash3/out/



grep -E 'xml|java' $FilesBro

=

 tail -f logfile | grep 'foo bar' | awk ... (with the actual AWK command being unspecified). There is no problem if we simply run tail -f logfile, because tail -f never buffers its output. Nor is there a problem if we run tail -f logfile | grep 'foo bar' interactively, because grep does not buffer its output if its standard output is a terminal. However, if the output of grep is being piped into something else (such as an AWK command), it starts buffering to improve efficiency.

In this particular example, the grep is actually redundant. We can remove it, and have AWK perform the filtering in addition to whatever else it's doing:

tail -f logfile | awk '/foo bar/ ...'

=

awk -f C:/bash3/CaseTUSUM.awk Restricted.txt > tmp_file && mv tmp_file Restricted.txt

grep RestrictedServices -rli . | xargs -I {} awk -f C:/bash3/CaseTUSUM.awk {} > tmp_file && mv tmp_file {}

grep RestrictedServices -rli . | xargs -I {} awk -f C:/bash3/CaseTUSUM.awk "{}" > tmp_file && mv tmp_file "{}"

? grep RestrictedServices -rli . | xargs -i {} awk -f C:/bash3/CaseTUSUM.awk '{}' > tmp_file && mv tmp_file '{}'


grep xargs awk

grep xargs {}

find awk {}

find . | awk -f C:/bash3/CaseTUSUM.awk {} > tmp_file && mv tmp_file {}

=

If you have an improved version of grep, such as GNU grep, you may have the -P option available. This option will enable Perl-like regex, allowing you to use \K which is a shorthand lookbehind. It will reset the match position, so anything before it is zero-width.

grep -Po 'name="\K.*?(?=")' filename

The o option makes grep print only the matched text, instead of the whole line.

grep -Po 'Serious Application error calling the (.*)desc:(.*)' 


